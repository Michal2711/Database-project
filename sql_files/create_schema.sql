DECLARE
    v_count  INT;
    v_name VARCHAR2(20);
    TYPE namesarray IS VARRAY(4) OF VARCHAR2(20);
    names    namesarray;
BEGIN
    names := namesarray('autorstwa', 'osoby', 'recenzje', 'wnioski');

    FOR i IN 1..names.count LOOP
        v_name := names(i);
        
        SELECT COUNT(*) INTO v_count FROM user_tables WHERE table_name = upper(v_name);
        IF v_count = 1 THEN
            DBMS_OUTPUT.PUT_LINE('Dropping table: ' || v_name);
            EXECUTE IMMEDIATE 'DROP TABLE '|| v_name || ' CASCADE CONSTRAINTS';
        END IF;
    END LOOP;
END;

/

DROP SEQUENCE seq_id_osoby;
DROP SEQUENCE seq_id_wniosku;
DROP SEQUENCE seq_numer_recenzenta;
commit;




-- Generated by Oracle SQL Developer Data Modeler 21.4.2.059.0838
--   at:        2022-05-30 03:45:56 CEST
--   site:      Oracle Database 21c
--   type:      Oracle Database 21c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE SEQUENCE seq_id_osoby START WITH 1 INCREMENT BY 1000 MAXVALUE 100000 ORDER;

CREATE SEQUENCE seq_id_wniosku START WITH 1 INCREMENT BY 1000 MAXVALUE 100000 ORDER;

CREATE SEQUENCE seq_numer_recenzenta START WITH 1 INCREMENT BY 1000 MAXVALUE 100000 ORDER;

CREATE TABLE autorstwa (
    id_wniosku    NUMBER(6) NOT NULL,
    lp            NUMBER(1) NOT NULL,
    id_autora     NUMBER(6) NOT NULL,
    typ_autorstwa CHAR(1) NOT NULL
)
LOGGING;

COMMENT ON TABLE autorstwa IS
    'AUTORSTWO jest to tabela, która pomog³a rozbiæ zwi¹zek wiele do wielu, który wystêpowa³ miêdzy tabelami WNIOSEK i AUTOR. Jest to tabela, która przechowuje unikalny identyfikator, którym jest LP ( liczba porz¹dkowa ) oraz TYP AUTORSTWA, który jest atrybutem asocjacyjnym';

COMMENT ON COLUMN autorstwa.lp IS
    'Liczba porz¹dkowa';

COMMENT ON COLUMN autorstwa.typ_autorstwa IS
    'TYP AUTORSTWA jest atrybutem asocjacyjnym';

CREATE INDEX atr_id_osoby_idx ON
    autorstwa (
        id_autora
    ASC )
        LOGGING;

GRANT SELECT, UPDATE, DELETE, INSERT ON autorstwa TO bd2c040_app WITH GRANT OPTION;

ALTER TABLE autorstwa
    ADD CONSTRAINT autorstwa_check CHECK ( typ_autorstwa IN ( 'A', 'R', 'T' ) );

ALTER TABLE autorstwa ADD CONSTRAINT atr_pk PRIMARY KEY ( id_wniosku,
                                                          lp );

CREATE TABLE osoby (
    id_osoby         NUMBER(6) NOT NULL,
    nazwisko         VARCHAR2(20) NOT NULL,
    imie             VARCHAR2(20) NOT NULL,
    drugie_imie      VARCHAR2(20),
    data_urodzenia   DATE NOT NULL,
    pesel            CHAR(11),
    stopien_naukowy  VARCHAR2(30),
    numer_recenzenta NUMBER(6),
    afiliacja        VARCHAR2(30),
    czy_recenzent    CHAR(1),
    czy_autor        CHAR(1)
)
LOGGING;

COMMENT ON TABLE osoby IS
    'OSOBY jest to tabela przechowuj¹ca poszczególne dane personalne autorów oraz recenzentów. Dane personalne to m.in:
IMIE, NAZWISKO, PESEL. Posiada ona klucz g³ówy, którym jest ID_OSOBY oraz unikalne identyfikator z³o¿ony z nazwiska, imienia oraz daty urodzenia i peselu. Dodatkowo unikalny identyfikator numer_recenzenta sprawia ¿e nie mog¹ siê powtórzyæ dwaj recenzenci o tym samym numerze. kolumny CZY_RECENZENT oraz CZY_AUTOR okreœlaj¹ czy dany wiersz tabeli opisuje recenzenta, czy autora';

COMMENT ON COLUMN osoby.numer_recenzenta IS
    'Posiada UNIQUE KEY, aby nie powtórzyli siê dwaj recenzenci o tym samym numerze';

COMMENT ON COLUMN osoby.czy_recenzent IS
    'Mo¿liwe wartoœci:
0 - jest to autor
1 - jest to recenzent';

COMMENT ON COLUMN osoby.czy_autor IS
    'Mo¿liwe wartoœci:
0 - jest to recenzent
1 - jest to autor';

GRANT INSERT, UPDATE, SELECT, DELETE ON osoby TO bd2c040_app WITH GRANT OPTION;

ALTER TABLE osoby
    ADD CONSTRAINT check_autor_recenzent CHECK ( ( czy_recenzent = 1
                                                   AND czy_autor = 0 )
                                                 OR ( czy_recenzent = 0
                                                      AND czy_autor = 1 ) );

ALTER TABLE osoby
    ADD CONSTRAINT check_stopien_naukowy CHECK ( stopien_naukowy IN ( 'inzynier', 'magister', 'doktor', 'profesor' ) );

ALTER TABLE osoby ADD CONSTRAINT id_osoby_check CHECK ( id_osoby > 0 );

ALTER TABLE osoby ADD CONSTRAINT osb_pk PRIMARY KEY ( id_osoby );

ALTER TABLE osoby ADD CONSTRAINT osb_recenzent_unique UNIQUE ( numer_recenzenta );

ALTER TABLE osoby
    ADD CONSTRAINT osb_unique UNIQUE ( nazwisko,
                                       imie,
                                       data_urodzenia,
                                       pesel );

CREATE TABLE recenzje (
    id_wniosku    NUMBER(6) NOT NULL,
    nr_recenzji   NUMBER(1) NOT NULL,
    id_recenzenta NUMBER(6) NOT NULL,
    ocena         NUMBER(1),
    uzasadnienie  VARCHAR2(300)
)
LOGGING;

COMMENT ON TABLE recenzje IS
    'RECENZJA jest to tabela przechowuj¹ca pojedyncze recenzje, a atrybutami s¹:
ID RECENZJI ( unikalny identyfikator ) oraz OCENA ( w skali od 0 do 5 ) oraz UZASADNIENIE';

COMMENT ON COLUMN recenzje.ocena IS
    'Ocena wniosku w skali 0-5';

CREATE INDEX rczja_id_osoby_idx ON
    recenzje (
        id_recenzenta
    ASC )
        LOGGING;

GRANT INSERT, SELECT, UPDATE, DELETE ON recenzje TO bd2c040_app WITH GRANT OPTION;

ALTER TABLE recenzje
    ADD CONSTRAINT zakres_oceny_check CHECK ( ocena IN ( 0, 1, 2, 3, 4,
                                                         5 ) );

ALTER TABLE recenzje
    ADD CONSTRAINT nr_recenzji_check CHECK ( nr_recenzji IN ( 1, 2, 3 ) );

ALTER TABLE recenzje ADD CONSTRAINT rczja_pk PRIMARY KEY ( id_wniosku,
                                                           nr_recenzji );

CREATE TABLE wnioski (
    id_wniosku    NUMBER(6) NOT NULL,
    opis_projektu VARCHAR2(1000) NOT NULL,
    tytul         VARCHAR2(50) NOT NULL,
    data_zlozenia DATE
)
LOGGING;

COMMENT ON TABLE wnioski IS
    'Wniosek jest tabel¹ reprezentuj¹c¹ pojedynczy wniosek z³o¿ony do instytucji finansuj¹cej badania naukowe.
Tabela ta zawiera unikalny identyfikator ID WNIOSKU, atrybut opis projektu, tytu³ oraz datê z³o¿enia wniosku';

COMMENT ON COLUMN wnioski.opis_projektu IS
    'D³ugi opis wniosku sk³adaj¹cy siê z maksymalnie 1000 znaków';

GRANT UPDATE, SELECT, INSERT, DELETE ON wnioski TO bd2c040_app WITH GRANT OPTION;

ALTER TABLE wnioski ADD CONSTRAINT id_wniosku_check CHECK ( id_wniosku > 0 );

ALTER TABLE wnioski ADD CONSTRAINT wnsk_pk PRIMARY KEY ( id_wniosku );

ALTER TABLE wnioski ADD CONSTRAINT wnsk_tytu³_un UNIQUE ( tytul );

ALTER TABLE autorstwa
    ADD CONSTRAINT atr_osb_fk FOREIGN KEY ( id_autora )
        REFERENCES osoby ( id_osoby )
    NOT DEFERRABLE;

ALTER TABLE autorstwa
    ADD CONSTRAINT atr_wnsk_fk FOREIGN KEY ( id_wniosku )
        REFERENCES wnioski ( id_wniosku )
    NOT DEFERRABLE;

ALTER TABLE recenzje
    ADD CONSTRAINT rczja_osb_fk FOREIGN KEY ( id_recenzenta )
        REFERENCES osoby ( id_osoby )
    NOT DEFERRABLE;

ALTER TABLE recenzje
    ADD CONSTRAINT rczja_wnsk_fk FOREIGN KEY ( id_wniosku )
        REFERENCES wnioski ( id_wniosku )
    NOT DEFERRABLE;

CREATE OR REPLACE VIEW KONKRETNA_OCENA_WNIOSKU ( TYTUL, IMIE, NAZWISKO, OCENA ) AS
SELECT TYTUL, IMIE, NAZWISKO, OCENA
FROM WNIOSKI w JOIN RECENZJE r USING (ID_WNIOSKU)
	JOIN OSOBY o ON (r.ID_RECENZENTA = o.ID_OSOBY) 
;

CREATE OR REPLACE VIEW OCENA_WNIOSKU ( TYTUL, OCENA ) AS
SELECT TYTUL, AVG(OCENA)
FROM RECENZJE r JOIN WNIOSKI w USING(ID_WNIOSKU)
GROUP BY TYTUL 
;

CREATE OR REPLACE TRIGGER osb_ins_trg 
    BEFORE INSERT ON OSOBY 
    FOR EACH ROW 
    ENABLE 
BEGIN
    SELECT seq_id_osoby.NEXTVAL INTO :NEW.ID_OSOBY FROM dual;
    IF ( :NEW.CZY_RECENZENT = '1' ) THEN
        SELECT seq_numer_recenzenta.NEXTVAL INTO :NEW.NUMER_RECENZENTA FROM dual;
    END IF; 
END; 
/

CREATE OR REPLACE TRIGGER rczja_ins_rec_trg 
    BEFORE INSERT ON RECENZJE 
    FOR EACH ROW 
    ENABLE 
DECLARE
	number_of_rec number(1);
BEGIN
	SELECT count(*) INTO number_of_rec
	FROM recenzje
	WHERE ID_WNIOSKU = :NEW.ID_WNIOSKU AND ID_RECENZENTA = :NEW.ID_RECENZENTA;

	IF number_of_rec > 0 THEN
		raise_application_error(-20001, 'Wniosek zostal juz zrecenzowany przez tego recenzenta');
	END IF;
END; 
/

CREATE OR REPLACE TRIGGER rczja_ins_trg 
    BEFORE INSERT ON RECENZJE 
    FOR EACH ROW 
    ENABLE 
DECLARE
	nr RECENZJE.NR_RECENZJI%TYPE;
BEGIN
	SELECT MAX(NR_RECENZJI) INTO nr
	FROM RECENZJE
	WHERE ID_WNIOSKU = :NEW.ID_WNIOSKU;

	IF nr is NULL THEN nr := 1;
	ELSIF  nr = 1 OR nr = 2  THEN 
		SELECT nr + 1 INTO :NEW.NR_RECENZJI FROM dual;
	ELSIF  nr = 3  THEN
        raise_application_error(-20001, 'Wniosek oceniony juz przez 3 osoby');
	END IF;
END; 
/

CREATE OR REPLACE TRIGGER wnsk_ins_trg 
    BEFORE INSERT ON WNIOSKI 
    FOR EACH ROW 
    ENABLE 
BEGIN
    SELECT seq_id_wniosku.NEXTVAL INTO :NEW.ID_WNIOSKU FROM dual; 
END; 
/

CREATE OR REPLACE TRIGGER fkntm_autorstwa BEFORE
    UPDATE OF id_wniosku, lp, id_autora ON autorstwa FOR EACH ROW
    WHEN (new.id_wniosku <> old.id_wniosku OR new.lp <> old.lp OR new.id_autora = old.id_autora)
BEGIN
    raise_application_error(-20225, 'Non Transferable FK constraint  on table AUTORSTWA is violated');
END;
/

CREATE OR REPLACE TRIGGER fkntm_recenzje BEFORE
    UPDATE OF id_wniosku, nr_recenzji, id_recenzenta ON recenzje FOR EACH ROW
    WHEN (new.id_wniosku <> old.id_wniosku OR new.nr_recenzji <> old.nr_recenzji OR new.id_recenzenta <> old.id_recenzenta)
BEGIN
    raise_application_error(-20225, 'Non Transferable FK constraint  on table RECENZJE is violated');
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             4
-- CREATE INDEX                             2
-- ALTER TABLE                             18
-- CREATE VIEW                              2
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           6
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          3
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
